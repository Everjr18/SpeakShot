name: Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Quality gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Unit tests (vitest)
        run: npm run test -- --runInBand
        continue-on-error: true

      - name: E2E smoke (Playwright)
        run: npm run e2e || echo "Playwright suite skipped, configure when ready"

  build-and-deploy:
    name: Build, push & deploy
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trigger Portainer redeploy
        if: ${{ secrets.PORTAINER_WEBHOOK_URL != '' }}
        env:
          PORTAINER_WEBHOOK_URL: ${{ secrets.PORTAINER_WEBHOOK_URL }}
        run: curl -fsS -X POST "$PORTAINER_WEBHOOK_URL"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -euo pipefail
            export DOCKER_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            export SSH_PATH="${{ secrets.SSH_PATH }}"
            mkdir -p "${SSH_PATH}"
            cd "${SSH_PATH}"
            cat <<'EOF_ENV' > .env
            ${{ secrets.ENV_FILE }}
            EOF_ENV
            cat <<'EOF_COMPOSE' > docker-compose.yml
            ${{ secrets.COMPOSE_FILE }}
            EOF_COMPOSE
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f

      - name: Health check
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -euo pipefail
            export HOST="http://localhost:3000"
            curl --fail --silent --show-error "${HOST}/api/health" >/dev/null

      - name: Upload rollback helper
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            mkdir -p "${{ secrets.SSH_PATH }}/scripts"
            cat <<'EOF_ROLLBACK' > "${{ secrets.SSH_PATH }}/scripts/rollback.sh"
            ${{ secrets.ROLLBACK_SCRIPT || '' }}
            EOF_ROLLBACK
            chmod +x "${{ secrets.SSH_PATH }}/scripts/rollback.sh"
