name: CI/CD SpeakShot

on:
  push:
    branches: [master]
    paths:
      - "Dockerfile"
      - "**/*.ts"
      - "**/*.tsx"
      - "**/*.js"
      - "**/*.json"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login a GHCR con el token automático del workflow
      - name: Log in to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # Construir y publicar imagen (solo NEXT_PUBLIC_* como build args)
      - name: Build and push image
        run: |
          IMAGE="ghcr.io/everjr18/speakshot:latest"
          docker build \
            --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            -t "$IMAGE" .
          docker push "$IMAGE"

      # Desplegar vía SSH: actualizar servicio e INYECTAR ENVs en runtime
      - name: Deploy via SSH (Swarm service update)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="ghcr.io/everjr18/speakshot:latest"
            SERVICE="speakshot_web"

            # Login en GHCR dentro del servidor (usa el mismo token/actor del job)
            echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Actualiza imagen e inyecta variables en runtime
            docker service update \
              --with-registry-auth \
              --image "$IMAGE" \
              --env-add NEXT_PUBLIC_SUPABASE_URL='${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}' \
              --env-add NEXT_PUBLIC_SUPABASE_ANON_KEY='${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}' \
              --env-add SUPABASE_SERVICE_ROLE_KEY='${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' \
              --force "$SERVICE"

